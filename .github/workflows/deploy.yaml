name: Deploy to AWS

on:
    workflow_dispatch:
    #push:
    #    branches:
    #      - main



env:
    AWS_REGION: eu-central-1
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
    SERVER_PUBLIC_IP: ${{ secrets.AWS_PUBLIC_KEY }}
    DOCKER_REPOSITORY: buy-sell
    IMAGE_TAG: strategie-meister-${{ github.ref_name }}
    DB_TAG: strategie-meister-db-${{ github.ref_name }}

    MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
    DB_HOST: ${{ secrets.DB_HOST }}
    DB_USER: ${{ secrets.DB_USER }}

    TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
    CHAT: ${{ secrets.CHAT }}
    STRIPTESTKEY: ${{ secrets.STRIPTESTKEY }}
    LINKTEST: ${{ secrets.LINKTEST }}
    LINKTEST_YEAR: ${{ secrets.LINKTEST_YEAR }}

    API_KEY: ${{ secrets.API_KEY }}
    API_SECRET: ${{ secrets.API_SECRET }}
    IPN_URL: ${{ secrets.IPN_URL }}






jobs:
    publish-to-ecr:
        runs-on: ubuntu-latest

        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Login to AWS ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          
          - name: Build and push docker image
            env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            run: |-
                aws ecr batch-delete-image --repository-name $DOCKER_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region $AWS_REGION
                aws ecr batch-delete-image --repository-name $DOCKER_REPOSITORY --image-ids imageTag=$DB_TAG --region $AWS_REGION
                
                docker build -f Docker/Dockerfile -t $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG

                docker build -f Docker/MySQLDockerfile -t $REGISTRY/$DOCKER_REPOSITORY:$DB_TAG .
                docker push $REGISTRY/$DOCKER_REPOSITORY:$DB_TAG


    pull-from-ecr-and-deploy:
        needs: publish-to-ecr
        runs-on: ubuntu-latest

        steps:
          - name: Login to AWS ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1          
          - name: Deploy docker image to EC2
            env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            uses: appleboy/ssh-action@master
            with:
              host: ${{ env.SERVER_PUBLIC_IP }}
              username: ec2-user
              key: ${{ env.PRIVATE_SSH_KEY }}
              envs: PRIVATE_SSH_KEY, REGISTRY, DOCKER_REPOSITORY, IMAGE_TAG, DB_TAG, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, DB_HOST, DB_USER, TELEGRAM_TOKEN, CHAT, STRIPTESTKEY, LINKTEST, LINKTEST_YEAR, API_KEY, API_SECRET, IPN_URL
              command_timeout: 15m
              script: |-
                sudo yum update
                sudo yum install docker -y
                sudo yum install awscli -y
                sudo systemctl start docker
                sudo systemctl enable docker

                echo $(aws ecr get-login-password --region $AWS_REGION) | sudo docker login --username AWS --password-stdin $REGISTRY
                
                sudo docker stop ${DB_HOST} || true
                sudo docker rm ${DB_HOST} || true
                sudo docker stop portfolium_telegram || true
                sudo docker rm portfolium_telegram || true
                sudo docker stop portfolium_scan || true
                sudo docker rm portfolium_scan || true
                sudo docker stop portfolium_altcoin || true
                sudo docker rm portfolium_altcoin || true
                sudo docker stop pmyadmin || true
                sudo docker rm pmyadmin || true
                sudo docker system prune -a -f
                
                sudo docker pull $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
                sudo docker pull $REGISTRY/$DOCKER_REPOSITORY:$DB_TAG
                sudo docker network create portfolium




                sudo docker run -d \
                  --name ${DB_HOST} \
                  --restart=on-failure \
                  -e MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}" \
                  -e MYSQL_DATABASE="${MYSQL_DATABASE}" \
                  --network portfolium \
                  -p 3306:3306 \
                  -v /home/ec2-user/data/db_data:/var/lib/mysql \
                  $REGISTRY/$DOCKER_REPOSITORY:$DB_TAG

                # Wait until MySQL is up and running
                until sudo docker exec ${DB_HOST} mysqladmin ping -h "127.0.0.1" -P 3306 --silent; do
                    echo "Waiting for MySQL to be ready..."
                    sleep 2
                done

                echo "MySQL is up and running!"




                sudo docker run -d \
                  --name portfolium_telegram \
                  --network portfolium \
                  --volume /home/ec2-user/data:/data \
                  --restart on-failure \
                  -e MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}" \
                  -e MYSQL_DATABASE="${MYSQL_DATABASE}" \
                  -e DB_HOST="${DB_HOST}" \
                  -e DB_USER="${DB_USER}" \
                  -e TELEGRAM_TOKEN="${TELEGRAM_TOKEN}" \
                  -e CHAT="${CHAT}" \
                  -e STRIPTESTKEY="${STRIPTESTKEY}" \
                  -e LINKTEST="${LINKTEST}" \
                  -e LINKTEST_YEAR="${LINKTEST_YEAR}" \
                  -e API_KEY="${API_KEY}" \
                  -e API_SECRET="${API_SECRET}" \
                  -e IPN_URL="${IPN_URL}" \
                  $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG telegram

                echo "Telegram Bot is up and running!"



                
                sudo docker run -d \
                  --name portfolium_altcoin \
                  --restart=on-failure \
                  --network portfolium \
                  --volume /home/ec2-user/data:/data \
                  -p 80:8000 \
                  $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG altcoin

                echo "Altcoin Webserver is up and running!"
